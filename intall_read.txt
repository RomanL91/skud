сохранение контейнеров
    sudo docker save <имя контейнера> > <путь куда сохраняем>/<имя>.tar
    например:
        sudo docker save skud_web > ./web.tar

сохранененые контейнеры вместе с файлом .env и docker-compose.yml
переносим на машину, где должны быть установлены Docker Desctop и WSL

Создаем папку, где будет развернут проект.
Копируем в него все с флешки.
Изменяем у файлов расширение .tar на .zip (можно поробовать не менять, но не исключено, что Windows будет ругаться)
В PowerShell по очереди используем следующиe команды для каждого образа:
    docker load -i <путь>\<имя>.zip
    например:
        docker load -i .\nginx.zip

Далее командой docker images можно увидеть образы, так же они появятся в Docker Desctop (данный шаг не обязательный)

Теперь можно использовать команду 
    docker-compose up
    использовать команду нужно в директории, где находится файл docker-compose.yml & .env

Начнется старт приложения.

Внимание! Это связано со странной работой PowerShell. При первом запуске, могут не правильно
запуститься контейнеры, не соблюдается очередность, хоть и прописана в конфиг файле.
Выход: дать собраться с ошибкой и через Docker Desctop уже остановить собравшийся контейнер
(это первая/верзняя вкладка). 
Теперь запустите его же - очередность дожлна быть не нарушена.

Прилагаю в текст содержание конфиг файлов, кроме .env

содержимое файла docker-compose:  -------->>>>>>>
============================================================
version: "3.7"


services:
  web:
    image: skud_web <<<<<<<--------это и есть что сначала save затем load !!!!
    restart: always
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    entrypoint:
      - ./entrypoint.sh
    expose:
      - 8000
    depends_on:
      - postgres
    networks:
      - djangonetwork
    links:
     - cache

  asgiserver:
    image: skud_asgiserver <<<<<<<--------это и есть что сначала save затем load !!!!
    restart: always
    command: daphne -b 0.0.0.0 -p 9000 core.asgi:application
    expose:
      - 9000
    depends_on:
      - postgres
    networks:
      - djangonetwork
    links:
     - cache

  postgres:
    image: postgres <<<<<<<--------это и есть что сначала save затем load !!!!
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    restart: always
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    env_file:
      - .env
    command: -p ${POSTGRES_PORT}
    networks:
      - djangonetwork

  nginx:
    image: skud_nginx <<<<<<<--------это и есть что сначала save затем load !!!!
    restart: always
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - 80:80
      - 443:443
    depends_on:
      - web
    networks:
      - djangonetwork

  cache:
    image: redis:6.2-alpine <<<<<<<--------это и есть что сначала save затем load !!!!
    restart: always
    ports:
      - '6379:6379'
    volumes: 
      - cache:/data
    depends_on:
      - postgres
    networks:
      - djangonetwork
   
volumes:
  media_volume:
  static_volume:
  postgres_data:
  cache:
    driver: local
networks:
    djangonetwork:
        driver: bridge
============================================================


По итогу будет получен рабочий контейнер и весь сервис будет развернут.
В сервисе не будет суперпользователя и какого еще пользователя.
Абсолютно чистый сервис и БД.

Чтобы работать дальше и создать например суперпользователя, нужно зайти в контейнер 
и создать его.
Зайти в контейнер можно как через консольные команды(docker exec -it <name_container> bash)
так и через Docker Desctop. Выбирите нужный контейнер, затем вкладку терминал.
В терминале доступны команды Django. Например для создания суперпользователя 
нужна команда python manage.py createsuperuser. Далее Django спросит все что потребуется.

